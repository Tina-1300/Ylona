{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Documentation Library Ylona Warning : This project is only available on Windows I plan to make a version for Linux but it won't be released right away. Welcome to the Ylona project documentation : The Ylona project was created because, on Windows, I find the C++ API to be quite complex to use. Being passionate about creating libraries, I explored everything that could be done in C++ via the Windows API. I chose to work on audio volume management because it requires few features, while still providing practical utility. The features I identified are: Change the volume. Recover current volume. Check if the sound is muted or not. Activate or deactivate mute. However, implementing these features requires writing a lot of code with the Windows API, which can quickly become tedious. Using my library, you can significantly reduce the amount of code you have to write, while still achieving the same result. By using Ylona, \u200b\u200byour code will not only be more readable, but also more pleasant to write! Documentation : Ylona Documentation (1.0.0) Contributors Creator of the library : Tina Support for other projects OpenCVE Information Author : Tina Date : 09/12/2024 Version : 1.0.0 Copyright : 2024 Tina - All rights reserved","title":"Home"},{"location":"index.html#documentation-library-ylona","text":"Warning : This project is only available on Windows I plan to make a version for Linux but it won't be released right away. Welcome to the Ylona project documentation : The Ylona project was created because, on Windows, I find the C++ API to be quite complex to use. Being passionate about creating libraries, I explored everything that could be done in C++ via the Windows API. I chose to work on audio volume management because it requires few features, while still providing practical utility. The features I identified are: Change the volume. Recover current volume. Check if the sound is muted or not. Activate or deactivate mute. However, implementing these features requires writing a lot of code with the Windows API, which can quickly become tedious. Using my library, you can significantly reduce the amount of code you have to write, while still achieving the same result. By using Ylona, \u200b\u200byour code will not only be more readable, but also more pleasant to write!","title":"Documentation Library Ylona"},{"location":"index.html#documentation","text":"Ylona Documentation (1.0.0)","title":"Documentation :"},{"location":"index.html#contributors","text":"Creator of the library : Tina","title":"Contributors"},{"location":"index.html#support-for-other-projects","text":"OpenCVE","title":"Support for other projects"},{"location":"index.html#information","text":"Author : Tina Date : 09/12/2024 Version : 1.0.0 Copyright : 2024 Tina - All rights reserved","title":"Information"},{"location":"Ylona/1.0.0/Ylona.html","text":"Library Ylona Version (1.0.0) Organization : After installing the Ylona library, to access the methods, you must use the namespace Ylona . In this namespace, there is a class named Ylona . This class contains all the library methods. Compilation information : To compile a program that uses the Ylona library, you must compile it with the following command : g++ -o test.exe test.cpp -lYlona -lole32 -lstdc++ -luuid This command links the Ylona library along with the necessary dependencies (ole32, stdc++, and uuid), allowing the program to function correctly. Method : getVolume() Description : Allows you to retrieve the current volume value. Settings : None : No settings. Returned value : float : Returns the current volume. Example of use : #include \"Ylona/Ylona.hpp\" int main(){ Ylona::Ylona y; float resultat = y.getVolume(); std::cout << resultat << std::endl; return 0; } Method : setVolume() Description : Allows you to set the volume level of the audio device. This function takes a float number between 0 and 100, representing volume as a percentage. Settings : float volume : The volume to define must be a number between 0.0 and 100.0 (inclusive). Returned value : bool : Returns true if the volume was correctly modified, false in case of error. Example of use : #include \"Ylona/Ylona.hpp\" int main(){ Ylona::Ylona y; if(y.setVolume(50.0f) == true){ std::cout << \"Sucess\" << std::endl; }else{ std::cout << \"Error\" << std::endl; } return 0; } Method : isMuted() Description : Returns whether the audio device is currently muted or not. This function checks if the sound is muted and returns a boolean value. Settings : None : No parameters.. Returned value : bool : Returns true if the audio is muted, false if it is not muted. Example of use : #include \"Ylona/Ylona.hpp\" int main(){ Ylona::Ylona y; bool isMuted = y.isMuted(); if (isMuted){ std::cout << \"The audio is muted.\" << std::endl; }else{ std::cout << \"The audio is not muted.\" << std::endl; } return 0; } Method : setMute() Description : Sets the mute status of the audio device. This function allows you to mute or unmute the audio depending on the value passed to it. Settings : bool mute : A boolean value. Pass true to mute the audio, or false to unmute it. Returned value : bool : Returns true if the mute status was successfully set, false in case of an error. Example of use : #include \"Ylona/Ylona.hpp\" int main(){ Ylona::Ylona y; // Mute the audio if (y.setMute(true)){ std::cout << \"The audio has been muted.\" << std::endl; }else{ std::cout << \"Failed to mute the audio.\" << std::endl; } // Unmute the audio if (y.setMute(false)){ std::cout << \"The audio has been unmuted.\" << std::endl; }else{ std::cout << \"Failed to unmute the audio.\" << std::endl; } return 0; }","title":"Ylona"},{"location":"Ylona/1.0.0/Ylona.html#library-ylona-version-100","text":"","title":"Library Ylona Version (1.0.0)"},{"location":"Ylona/1.0.0/Ylona.html#_1","text":"","title":""},{"location":"Ylona/1.0.0/Ylona.html#organization","text":"After installing the Ylona library, to access the methods, you must use the namespace Ylona . In this namespace, there is a class named Ylona . This class contains all the library methods.","title":"Organization :"},{"location":"Ylona/1.0.0/Ylona.html#compilation-information","text":"To compile a program that uses the Ylona library, you must compile it with the following command : g++ -o test.exe test.cpp -lYlona -lole32 -lstdc++ -luuid This command links the Ylona library along with the necessary dependencies (ole32, stdc++, and uuid), allowing the program to function correctly.","title":"Compilation information :"},{"location":"Ylona/1.0.0/Ylona.html#method-getvolume","text":"Description : Allows you to retrieve the current volume value.","title":"Method : getVolume()"},{"location":"Ylona/1.0.0/Ylona.html#settings","text":"None : No settings.","title":"Settings :"},{"location":"Ylona/1.0.0/Ylona.html#returned-value","text":"float : Returns the current volume.","title":"Returned value :"},{"location":"Ylona/1.0.0/Ylona.html#example-of-use","text":"#include \"Ylona/Ylona.hpp\" int main(){ Ylona::Ylona y; float resultat = y.getVolume(); std::cout << resultat << std::endl; return 0; }","title":"Example of use :"},{"location":"Ylona/1.0.0/Ylona.html#_2","text":"","title":""},{"location":"Ylona/1.0.0/Ylona.html#method-setvolume","text":"Description : Allows you to set the volume level of the audio device. This function takes a float number between 0 and 100, representing volume as a percentage.","title":"Method : setVolume()"},{"location":"Ylona/1.0.0/Ylona.html#settings_1","text":"float volume : The volume to define must be a number between 0.0 and 100.0 (inclusive).","title":"Settings :"},{"location":"Ylona/1.0.0/Ylona.html#returned-value_1","text":"bool : Returns true if the volume was correctly modified, false in case of error.","title":"Returned value :"},{"location":"Ylona/1.0.0/Ylona.html#example-of-use_1","text":"#include \"Ylona/Ylona.hpp\" int main(){ Ylona::Ylona y; if(y.setVolume(50.0f) == true){ std::cout << \"Sucess\" << std::endl; }else{ std::cout << \"Error\" << std::endl; } return 0; }","title":"Example of use :"},{"location":"Ylona/1.0.0/Ylona.html#_3","text":"","title":""},{"location":"Ylona/1.0.0/Ylona.html#method-ismuted","text":"Description : Returns whether the audio device is currently muted or not. This function checks if the sound is muted and returns a boolean value.","title":"Method : isMuted()"},{"location":"Ylona/1.0.0/Ylona.html#settings_2","text":"None : No parameters..","title":"Settings :"},{"location":"Ylona/1.0.0/Ylona.html#returned-value_2","text":"bool : Returns true if the audio is muted, false if it is not muted.","title":"Returned value :"},{"location":"Ylona/1.0.0/Ylona.html#example-of-use_2","text":"#include \"Ylona/Ylona.hpp\" int main(){ Ylona::Ylona y; bool isMuted = y.isMuted(); if (isMuted){ std::cout << \"The audio is muted.\" << std::endl; }else{ std::cout << \"The audio is not muted.\" << std::endl; } return 0; }","title":"Example of use :"},{"location":"Ylona/1.0.0/Ylona.html#_4","text":"","title":""},{"location":"Ylona/1.0.0/Ylona.html#method-setmute","text":"Description : Sets the mute status of the audio device. This function allows you to mute or unmute the audio depending on the value passed to it.","title":"Method : setMute()"},{"location":"Ylona/1.0.0/Ylona.html#settings_3","text":"bool mute : A boolean value. Pass true to mute the audio, or false to unmute it.","title":"Settings :"},{"location":"Ylona/1.0.0/Ylona.html#returned-value_3","text":"bool : Returns true if the mute status was successfully set, false in case of an error.","title":"Returned value :"},{"location":"Ylona/1.0.0/Ylona.html#example-of-use_3","text":"#include \"Ylona/Ylona.hpp\" int main(){ Ylona::Ylona y; // Mute the audio if (y.setMute(true)){ std::cout << \"The audio has been muted.\" << std::endl; }else{ std::cout << \"Failed to mute the audio.\" << std::endl; } // Unmute the audio if (y.setMute(false)){ std::cout << \"The audio has been unmuted.\" << std::endl; }else{ std::cout << \"Failed to unmute the audio.\" << std::endl; } return 0; }","title":"Example of use :"}]}